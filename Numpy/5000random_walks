#!/usr/bin/python
#-*- coding: utf8 -*-

u'''''
 Script file: walk_around.py
Purpose:
 A simulation applet, random walk, starting from 0, with a 1 or -1 step, equal probability. Take a total of 1000 steps.
 Now it is replaced by an array operation, using the np.random module to randomly generate
a one-time result of 1000 coin flips (1 or -1), and then calculating the cumulative sum
 
Record of revisions:
Date           Programmer          Description of change
=====          ==============      ===========================
30-May-2018                         Original
 
Define variables:
step         --it can be 1 or -1
'''


nwalks=5000   #calculate 5000 random walks
nsteps=1000   #each random walk has 1000 steps
draws = np.random.randint(0,2,size=(nwalks,nsteps))  #0 or 1
steps=np.where(draws > 0 , 1, -1)
walks=steps.cumsum(1)
walks


# after this, You can calculate the maximum and minimum values, for example
# walks.min() / walks.max()

hits30 = (np.abs(walk) >= 30).any(1)   ##Use boolean arrays to select random walks that have an absolute value of over 30 
hits30.sum()   #Calculate the number of arrivals of 30 or -30
crossing_times = (np.abs(walk[hits30]) >= 30).argmax(1)  #and call argmax to get the crossing time on axis 1
crossing_times.mean() 
# argmax returns the index of the first maximum of a Boolean array
# It returns how long it takes for this random walk to be at least 30 steps away from the initial 0 point (in either direction)
