
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.image import  imread

def sigmoid(x):  #sigmoid() is a step_function always be used
    return 1/(1+np.exp(-x))

#Implementing a simple three-layer neuron
X = np.array([1.0,0.5])
W1 = np.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])
B1 = np.array([0.1,0.2,0.3])

# print(W1.shape) #(2,3)
# print(X.shape) #(2,)
# print(B1.shape) #(3,)
# A1 = np.dot(X, W1) + B1  # [0.3 0.7 1.1]
# Z1 = sigmoid(A1)  # [0.57444252 0.66818777 0.75026011]
#
# W2 = np.array([[0.1,0.4],[0.2,0.5],[0.3,0.6]])
# B2 = np.array([0.1,0.2])
#
# A2 = np.dot(Z1,W2) + B2
# Z2 = sigmoid(A2)
#
# print(Z2) # [0.62624937 0.7710107 ]

def init_network():
    network = {}
    network['W1'] = np.array([[0.1, 0.3, 0.5], [0.2, 0.4, 0.6]])
    network['b1'] = np.array([0.1, 0.2, 0.3])
    network['W2'] = np.array([[0.1, 0.4], [0.2, 0.5], [0.3, 0.6]])
    network['b2'] = np.array([0.1, 0.2])
    network['W3'] = np.array([[0.1, 0.3], [0.2, 0.4]])
    network['b3'] = np.array([0.1, 0.2])
    return network

def forward(network,x):
    W1, W2, W3 = network['W1'], network['W2'], network['W3']
    b1, b2, b3 = network['b1'], network['b2'], network['b3']
    a1 = np.dot(x, W1) + b1
    z1 = sigmoid(a1)
    a2 = np.dot(z1, W2) + b2
    z2 = sigmoid(a2)
    a3 = np.dot(z2, W3) + b3
    y = sigmoid(a3)  #you can change the active function() here
    return y

network = init_network()
x = np.array([1.0,0.5])
y = forward(network, x)
print(y) # [
