
import numpy as np
import sys, os
import matplotlib.pylab as plt
# from matplotlib.image import  imread

def function_2(x):
    return x[0]**2 + x[1]**2

# print(numerical_diff(function_tmp2,4.0))

def numerical_gradient(f,x):  # 求解数值微分  [f(x+h) - f(x-h)] / (2*h)
    h = 1e-4
    grad = np.zeros_like(x)

    for idx in range(x.size):
        tmp_val = x[idx]
        x[idx] = tmp_val + h
        fxh1 = f(x)

        x[idx] = tmp_val - h
        fxh2 = f(x)

        grad[idx] = (fxh1-fxh2) / (2*h)
        x[idx] = tmp_val

    return grad

def gradient_descent(f,init_x,lr=0.01,step_num=100): #lr learning rate学习率(超参数）, it should not be too large or too small
    x = init_x
    for i in range(step_num):
        grad = numerical_gradient(f,x)
        x -= lr * grad

    return x

init_x = np.array([-3.0,4.0])   # 设初始值为(-3.0, 4.0)，开始使用梯度法􏱍找最小值
print(gradient_descent(function_2,init_x, 0.1,100))

Output:
[-6.11110793e-10  8.14814391e-10]  #very close to the correct minimum number(0,0)
