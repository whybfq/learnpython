#Reference: https://discuss.codecademy.com/t/how-can-i-iterate-over-a-list-backward/376303

'''
One way is by utilizing the range() method, with a negative step value, 
so that the index decreases by 1 per element, essentially going backward 
in the list. The start index must begin at the last index of the list, 
and the end index would have to be offset by 1 to the first index, 
because it is exclusive. This will look something like the following,
'''

for i in range(len(list)-1,-1,-1):
  ...

'''
Another way to iterate over a list backward is to utilize list slicing, 
with a negative step. This will return a new list of elements in reverse order.
'''

for i in list[::-1]:
  ...
  
def reverse(x, i = 0):
 try:
   while i + 1 <= len(x) // 2:
     a , b = x[i],x[-(i + 1)]
     x[i], x[-(i+1)] = b, a
     i += 1
   return x
  except:
   return x
  
'''
Any hint as to how we would use i in the Reversii plot?

As noted, this is for extra study when one has competed the course. 
Bookmark it and return later to explore this concept. It wonâ€™t come up 
in the course but will surely have piqued your interest.
See you on the flip-flop.
what's more we can deal with one exception, a str parameter...
'''

def reverse(x, i = 0):
  try: 
    while i + 1 <= len(x) // 2:
      x[-i - 1], x[i] = x[i], x[-i - 1]
      i += 1
    return x
  except:
    if isinstance(x, str):
      return ''.join(reverse(list(x)))
    else:
      return x
>>> reverse('a string')


'''
There is nother way to make a comparision
'''
for x in range(len(lst1)):
  if lst1[x] == lst2[len(lst2) - 1 - x]:
    return True
return False

